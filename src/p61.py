#-*- coding: utf-8 -*-

from p import Problem

from toolbox import is_triang, is_square, is_pent, is_hexa, is_hepta, is_octa

class p61(Problem):

    """
        Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal 
        numbers are all figurate (polygonal) numbers and are generated by the 
        following formulae:
        
        Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
        Square          P4,n=n^2            1, 4, 9, 16, 25, ...
        Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
        Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
        Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
        Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
        
        The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
        interesting properties.
        
        1. The set is cyclic, in that the last two digits of each number is the 
        first two digits of the next number (including the last number with 
        the first).
        2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
        pentagonal (P5,44=2882), is represented by a different number in the set.
        3. This is the only set of 4-digit numbers with this property.
        
        Find the sum of the only ordered set of six cyclic 4-digit numbers for 
        which each polygonal type: triangle, square, pentagonal, hexagonal, 
        heptagonal, and octagonal, is represented by a different number in the 
        set.

    """

    def satisfy(self, cand):
        to_check = [
                        (is_triang,    list()), 
                        (is_square,    list()),
                        (is_pent,      list()),
                        (is_hexa,      list()),
                        (is_hepta,     list()),
                        (is_octa,      list()),
                    ]
        for n in cand:
            for test in to_check:
                if test[0](n):
                    test[1].append(n)
                    
        used = list()
        for octa in to_check[5][1]:
            used.append(octa)
            for hepta in to_check[4][1]:
                if hepta in used:
                    continue
                used.append(hepta)
                for hexa in to_check[3][1]:
                    if hexa in used:
                        continue
                    used.append(hexa)
                    for pent in to_check[2][1]:
                        if pent in used:
                            continue
                        used.append(pent)
                        for squa in to_check[1][1]:
                            if squa in used:
                                continue
                            used.append(squa)
                            for triang in to_check[0][1]:
                                if triang in used:
                                    continue
                                return True
                            used.remove(squa)
                        used.remove(pent)
                    used.remove(hexa)
                used.remove(hepta)
            used.remove(octa)
        return False


    def is_nothing(self, n):
        return not (is_triang(n) or is_square(n) or is_pent(n) or is_hexa(n) or is_hepta(n) or is_octa(n))


    def candidates(self, n):
        c = [10] * n
        while c != [99] * n:
            yield c
            i = len(c) - 1
            while i >= 0 and c[i] == 99:
                c[i] = 10
                i -= 1
            if i < 0:
                break
            c[i] += 1
            while self.is_nothing(100 * c[i - 1] + c[i]) and c[i] < 99:
                c[i] += 1
            

    def solve(self):
        candidates = list()
        for cand in self.candidates(6):
            candi = list()
            for i in xrange(len(cand) - 1):
                candi.append(cand[i] * 100 + cand[i + 1])
            candi.append(cand[-1] * 100 + cand[0])
            if self.satisfy(candi):
                print candi
                return sum(candi)
        return None
